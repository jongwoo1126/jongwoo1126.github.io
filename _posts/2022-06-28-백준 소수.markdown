---
layout: post
title: 백준 2581번 소수
date: 2022-06-28
category: BaeckJoon
---
# 백준 2581번 소수
#### 문제

자연수 M과 N이 주어질 때 M이상 N이하의 자연수 중 소수인 것을 모두 골라 이들 소수의 합과 최솟값을 찾는 프로그램을 작성하시오.            

예를 들어 M=60, N=100인 경우 60이상 100이하의 자연수 중 소수는 61, 67, 71, 73, 79, 83, 89, 97 총 8개가 있으므로, 이들 소수의 합은 620이고, 최솟값은 61이 된다.                  

M이상 N이하의 자연수 중 소수인 것을 모두 찾아 첫째 줄에 그 합을, 둘째 줄에 그 중 최솟값을 출력한다.      
단, M이상 N이하의 자연수 중 소수가 없을 경우는 첫째 줄에 -1을 출력한다.              
                  
#### 코드
```python
m = int(input())
n = int(input())
list = []

for i in range(m, n+1):     
    for j in range(2, i+1):
        if i % j == 0:
            if i == j:
                list.append(i)
            break
if len(list) == 0:
    print(-1)
else:
    print(sum(list))
    print(list[0])           
```

#### 해설
입력한 리스트에서 소수 갯수를 찾는 문제 '소수 찾기'의 코드를 조금 변경하였다.         
'소수 찾기'의 코드는 아래와 같다.       
```
a = int(input())
list = list(map(int, input().split()))
count = 0

for i in list:
    for j in range(2, i+1):
        if i % j == 0:
            if i == j:
                count += 1

            break

print(count)

```
여기서 문제에 필요 없는 a, list, count를 지워주고 풀이에 필요한 m과 n 그리고 비어있는 list를 정의해준다.     
이 문제는 list에서 소수를 찾는 것이 아닌 m이상 n이하의 자연수에서 소수를 찾기때문에 list 대신 range(m, n+1)을 넣어주었다.          
범위 내 소수를 찾으면 갯수를 추가하는게 아니라 합을 구해야하기 때문에 소수는 리스트에 추가해준다.         
결과 출력은 문제에 주어진대로 소수가 없으면 -1이 출력되게 하고, 아닐 경우는 소수의 합과 최솟값을 출력한다.
